use data::{ColumnName, Value};
use query::{Comparator, Lhs, QueryLine, Rhs};

#[pub]
query -> Vec<QueryLine>
  = (select / where) ++ "\n"

select -> QueryLine
  = __ "s " __ e:col_names __ { QueryLine::Select(e) }

where -> QueryLine
  = __ "w " l:lhs "=" r:rhs  { QueryLine::Where(l, Comparator::Equal, r) }
  / __ "w " l:lhs ">" r:rhs  { QueryLine::Where(l, Comparator::Greater, r) }
  / __ "w " l:lhs "<" r:rhs  { QueryLine::Where(l, Comparator::Less, r) }
  / __ "w " l:lhs ">=" r:rhs { QueryLine::Where(l, Comparator::GreaterOrEqual, r) }
  / __ "w " l:lhs "<=" r:rhs { QueryLine::Where(l, Comparator::LessOrEqual, r) }

lhs -> Lhs
  = l:col_name { Lhs::Column(l) }

rhs -> Rhs
  = c:col_name { Rhs::Column(c) }
  / __ i:int __ { Rhs::Constant(Value::Int(i)) }
  / __ b:bool __ { Rhs::Constant(Value::Bool(b)) }
  / __ "\"" s:string "\"" __ { Rhs::Constant(Value::String(s)) }

col_names -> Vec<ColumnName>
  = col_name ++ ","

col_name -> ColumnName
  = __ t:string "." n:string __ { ColumnName::new(t, n) }

int -> usize
  = [0-9]+ { match_str.parse::<usize>().unwrap() }

bool -> bool
  = "true" { true }
  / "false" { false }

string -> String
  = [a-zA-Z0-9]+ { match_str.to_owned() }

__ = " "*
