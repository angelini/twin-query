use data::{ColumnName, Value};
use query::{Comparator, QueryLine};

#[pub]
query -> Vec<QueryLine>
  = (select / join / where / limit) ++ "\n"

select -> QueryLine
  = __ "s " __ e:col_names __ { QueryLine::Select(e) }

join -> QueryLine
  = __ "j "? l:string " on " r:col_name { QueryLine::Join(l, r) }

where -> QueryLine
  = __ "w "? l:col_name "=" r:value  { QueryLine::Where(l, Comparator::Equal, r) }
  / __ "w "? l:col_name ">" r:value  { QueryLine::Where(l, Comparator::Greater, r) }
  / __ "w "? l:col_name "<" r:value  { QueryLine::Where(l, Comparator::Less, r) }
  / __ "w "? l:col_name ">=" r:value { QueryLine::Where(l, Comparator::GreaterOrEqual, r) }
  / __ "w "? l:col_name "<=" r:value { QueryLine::Where(l, Comparator::LessOrEqual, r) }

limit -> QueryLine
  = __ "l " __ i:int __ { QueryLine::Limit(i) }

col_names -> Vec<ColumnName>
  = col_name ++ ","

col_name -> ColumnName
  = __ t:string "." n:string __ { ColumnName::new(t, n) }

value -> Value
  = __ i:int __ { Value::Int(i) }
  / __ b:bool __ { Value::Bool(b) }
  / __ "\"" s:string_with_whitespace "\"" __ { Value::String(s) }

int -> usize
  = [0-9]+ { match_str.parse::<usize>().unwrap() }

bool -> bool
  = "true" { true }
  / "false" { false }

string_with_whitespace -> String
  = [a-zA-Z0-9 ]+ { match_str.to_owned() }

string -> String
  = [a-zA-Z0-9]+ { match_str.to_owned() }

__ = " "*
