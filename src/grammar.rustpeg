use data::{ColumnName, Value};
use plan::{Comparator, Predicate, QueryLine};

#[pub]
query -> Vec<QueryLine>
  = (select / join / where / limit) ++ "\n"

select -> QueryLine
  = __ "s " __ e:col_names __ { QueryLine::Select(e) }

join -> QueryLine
  = __ "j "? l:string " on " r:col_name { QueryLine::Join(l, r) }

where -> QueryLine
  = __ "w "? l:col_name p:or_predicate  { QueryLine::Where(l, p) }

limit -> QueryLine
  = __ "l " __ i:int __ { QueryLine::Limit(i) }

or_predicate -> Predicate
  = p:constant_predicate ++ "or" { Predicate::or_from_vec(p) }

constant_predicate -> Predicate
  = __ "=" r:value __ { Predicate::Constant(Comparator::Equal, r) }
  / __ ">" r:value __ { Predicate::Constant(Comparator::Greater, r) }
  / __ "<" r:value __ { Predicate::Constant(Comparator::Less, r) }
  / __ ">=" r:value __ { Predicate::Constant(Comparator::GreaterOrEqual, r) }
  / __ "<=" r:value __ { Predicate::Constant(Comparator::LessOrEqual, r) }

col_names -> Vec<ColumnName>
  = col_name ++ ","

col_name -> ColumnName
  = __ t:string "." n:string __ { ColumnName::new(t, n) }

value -> Value
  = __ i:int __ { Value::Int(i) }
  / __ b:bool __ { Value::Bool(b) }
  / __ "\"" s:string_with_whitespace "\"" __ { Value::String(s) }

int -> usize
  = [0-9]+ { match_str.parse::<usize>().unwrap() }

bool -> bool
  = "true" { true }
  / "false" { false }

string_with_whitespace -> String
  = [a-zA-Z0-9_ ]+ { match_str.to_owned() }

string -> String
  = [a-zA-Z0-9_]+ { match_str.to_owned() }

__ = " "*
